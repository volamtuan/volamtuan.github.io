#!/bin/bash
set -e

# ----------------------------
# ‚ö° Si√™u t·ªëc nh·∫•t: GNU parallel + curl multi-thread
# ----------------------------

[ "$EUID" -ne 0 ] && { echo "‚ö†Ô∏è Ch·∫°y script v·ªõi root"; exit 1; }

# C√†i tools n·∫øu thi·∫øu
TOOLS=(wget curl jq ss awk parallel nmap)
for t in "${TOOLS[@]}"; do
    command -v "$t" >/dev/null 2>&1 || {
        if command -v apt-get >/dev/null; then
            apt-get update -qq && apt-get install -y -qq "$t" || true
        elif command -v dnf >/dev/null; then dnf install -y "$t" || true
        elif command -v yum >/dev/null; then yum install -y "$t" || true
        elif command -v apk >/dev/null; then apk add --no-cache "$t" || true
        else echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y package manager cho $t"; fi
    }
done

rm -f live_proxy.txt die_proxy.txt cong.txt 2>/dev/null
touch live_proxy.txt die_proxy.txt cong.txt

# M√†u terminal
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
RED="\033[1;31m"
RESET="\033[0m"

CPU=$(nproc || echo 4)
CONCURRENCY=$(( CPU * 16 ))

get_ip(){
    local port="$1"
    for svc in https://api64.ipify.org https://httpbin.org/ip https://ifconfig.me; do
        ip=$(curl -s --max-time 2 --proxy "http://localhost:$port" "$svc" | grep -oE "([0-9]{1,3}\.){3}[0-9]{1,3}" || true)
        [ -n "$ip" ] && break
    done
    echo "${ip:-null}"
}

get_country(){
    local ip="$1"
    local country=""
    for api in "http://ip-api.com/json/$ip" "https://ipinfo.io/$ip/json" "https://ipwhois.app/json/$ip"; do
        country=$(curl -s --max-time 2 "$api" | jq -r ".country" 2>/dev/null || true)
        [[ -n "$country" && "$country" != "null" ]] && break
    done
    echo "${country:-Kh√¥ng x√°c ƒë·ªãnh}"
}

export -f get_ip get_country

# ----------------------------
# Qu√©t port m·ªü localhost (∆∞u ti√™n nmap, fallback ss)
# ----------------------------
echo "‚è≥ Qu√©t port TCP localhost..."
open_ports=""

if command -v nmap >/dev/null 2>&1; then
    open_ports=$(nmap -p 1-65535 -T4 -sT 127.0.0.1 2>/dev/null | grep "open" | awk '{print $1}' | cut -d'/' -f1)
fi

if [ -z "$open_ports" ]; then
    if command -v ss >/dev/null 2>&1; then
        open_ports=$(ss -tln 2>/dev/null | awk 'NR>1{split($4,a,":"); print a[length(a)]}' | sort -n | uniq)
    fi
fi

if [ -z "$open_ports" ]; then
    echo "‚ùå Kh√¥ng t√¨m th·∫•y port m·ªü tr√™n localhost (nmap/ss kh√¥ng tr·∫£ k·∫øt qu·∫£)."
    exit 0
fi

echo "‚úÖ Port m·ªü: $open_ports"

# ----------------------------
# H√†m SV1 ‚Üí SV2 tu·∫ßn t·ª± tr√™n m·ªói port
# ----------------------------
check_proxy(){
    local port="$1"
    for check in SV1 SV2; do
        ip=$(get_ip "$port")
        if [ "$ip" != "null" ]; then
            country=$(get_country "$ip")
            speed_bytes=$(curl -s --max-time 2 --proxy "http://localhost:$port" http://speedtest.tele2.net/1MB.zip -o /dev/null -w "%{speed_download}" || echo 0)
            speed=$(awk -v b="$speed_bytes" 'BEGIN{printf "%.2f Mbps", b/1024/1024*8}')
            color=$([ "$check" == "SV1" ] && echo "$GREEN" || echo "$YELLOW")
            echo -e "${color}‚úÖ $check|$port|$ip|$country|$speed${RESET}" | tee -a live_proxy.txt
        else
            echo -e "${RED}‚ùå $check | Port $port failed${RESET}" | tee -a die_proxy.txt
        fi
    done
}

export -f check_proxy

# ----------------------------
# Ch·∫°y song song t·∫•t c·∫£ port
# ----------------------------
echo "$open_ports" | parallel -j "$CONCURRENCY" check_proxy {}

# L∆∞u danh s√°ch port s·ªëng
awk -F '|' '{print $2}' live_proxy.txt | sort -n -u > cong.txt

# ----------------------------
# T·ªïng k·∫øt
# ----------------------------
echo -e "\nüéâ Ho√†n t·∫•t l√∫c: $(date)"
echo "‚úÖ Proxy s·ªëng: $(wc -l < live_proxy.txt 2>/dev/null || echo 0)"
echo "‚ö†Ô∏è Proxy l·ªói: $(wc -l < die_proxy.txt 2>/dev/null || echo 0)"
echo "üìÑ Danh s√°ch port s·ªëng: cong.txt"
